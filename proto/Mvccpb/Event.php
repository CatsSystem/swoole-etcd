<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kv.proto

namespace Mvccpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>mvccpb.Event</code>
 */
class Event extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * type is the kind of event. If type is a PUT, it indicates
     * new data has been stored to the key. If type is a DELETE,
     * it indicates the key was deleted.
     * </pre>
     *
     * <code>.mvccpb.Event.EventType type = 1;</code>
     */
    private $type = 0;
    /**
     * <pre>
     * kv holds the KeyValue for the event.
     * A PUT event contains current kv pair.
     * A PUT event with kv.Version=1 indicates the creation of a key.
     * A DELETE/EXPIRE event contains the deleted key with
     * its modification revision set to the revision of deletion.
     * </pre>
     *
     * <code>.mvccpb.KeyValue kv = 2;</code>
     */
    private $kv = null;
    /**
     * <pre>
     * prev_kv holds the key-value pair before the event happens.
     * </pre>
     *
     * <code>.mvccpb.KeyValue prev_kv = 3;</code>
     */
    private $prev_kv = null;

    public function __construct() {
        \GPBMetadata\Kv::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * type is the kind of event. If type is a PUT, it indicates
     * new data has been stored to the key. If type is a DELETE,
     * it indicates the key was deleted.
     * </pre>
     *
     * <code>.mvccpb.Event.EventType type = 1;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <pre>
     * type is the kind of event. If type is a PUT, it indicates
     * new data has been stored to the key. If type is a DELETE,
     * it indicates the key was deleted.
     * </pre>
     *
     * <code>.mvccpb.Event.EventType type = 1;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Mvccpb\Event_EventType::class);
        $this->type = $var;
    }

    /**
     * <pre>
     * kv holds the KeyValue for the event.
     * A PUT event contains current kv pair.
     * A PUT event with kv.Version=1 indicates the creation of a key.
     * A DELETE/EXPIRE event contains the deleted key with
     * its modification revision set to the revision of deletion.
     * </pre>
     *
     * <code>.mvccpb.KeyValue kv = 2;</code>
     */
    public function getKv()
    {
        return $this->kv;
    }

    /**
     * <pre>
     * kv holds the KeyValue for the event.
     * A PUT event contains current kv pair.
     * A PUT event with kv.Version=1 indicates the creation of a key.
     * A DELETE/EXPIRE event contains the deleted key with
     * its modification revision set to the revision of deletion.
     * </pre>
     *
     * <code>.mvccpb.KeyValue kv = 2;</code>
     */
    public function setKv(&$var)
    {
        GPBUtil::checkMessage($var, \Mvccpb\KeyValue::class);
        $this->kv = $var;
    }

    /**
     * <pre>
     * prev_kv holds the key-value pair before the event happens.
     * </pre>
     *
     * <code>.mvccpb.KeyValue prev_kv = 3;</code>
     */
    public function getPrevKv()
    {
        return $this->prev_kv;
    }

    /**
     * <pre>
     * prev_kv holds the key-value pair before the event happens.
     * </pre>
     *
     * <code>.mvccpb.KeyValue prev_kv = 3;</code>
     */
    public function setPrevKv(&$var)
    {
        GPBUtil::checkMessage($var, \Mvccpb\KeyValue::class);
        $this->prev_kv = $var;
    }

}

