<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>etcdserverpb.WatchResponse</code>
 */
class WatchResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    private $header = null;
    /**
     * <pre>
     * watch_id is the ID of the watcher that corresponds to the response.
     * </pre>
     *
     * <code>int64 watch_id = 2;</code>
     */
    private $watch_id = 0;
    /**
     * <pre>
     * created is set to true if the response is for a create watch request.
     * The client should record the watch_id and expect to receive events for
     * the created watcher from the same stream.
     * All events sent to the created watcher will attach with the same watch_id.
     * </pre>
     *
     * <code>bool created = 3;</code>
     */
    private $created = false;
    /**
     * <pre>
     * canceled is set to true if the response is for a cancel watch request.
     * No further events will be sent to the canceled watcher.
     * </pre>
     *
     * <code>bool canceled = 4;</code>
     */
    private $canceled = false;
    /**
     * <pre>
     * compact_revision is set to the minimum index if a watcher tries to watch
     * at a compacted index.
     * This happens when creating a watcher at a compacted revision or the watcher cannot
     * catch up with the progress of the key-value store.
     * The client should treat the watcher as canceled and should not try to create any
     * watcher with the same start_revision again.
     * </pre>
     *
     * <code>int64 compact_revision = 5;</code>
     */
    private $compact_revision = 0;
    /**
     * <code>repeated .mvccpb.Event events = 11;</code>
     */
    private $events;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    public function getHeader()
    {
        return $this->header;
    }

    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    public function setHeader(&$var)
    {
        GPBUtil::checkMessage($var, \Etcdserverpb\ResponseHeader::class);
        $this->header = $var;
    }

    /**
     * <pre>
     * watch_id is the ID of the watcher that corresponds to the response.
     * </pre>
     *
     * <code>int64 watch_id = 2;</code>
     */
    public function getWatchId()
    {
        return $this->watch_id;
    }

    /**
     * <pre>
     * watch_id is the ID of the watcher that corresponds to the response.
     * </pre>
     *
     * <code>int64 watch_id = 2;</code>
     */
    public function setWatchId($var)
    {
        GPBUtil::checkInt64($var);
        $this->watch_id = $var;
    }

    /**
     * <pre>
     * created is set to true if the response is for a create watch request.
     * The client should record the watch_id and expect to receive events for
     * the created watcher from the same stream.
     * All events sent to the created watcher will attach with the same watch_id.
     * </pre>
     *
     * <code>bool created = 3;</code>
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * <pre>
     * created is set to true if the response is for a create watch request.
     * The client should record the watch_id and expect to receive events for
     * the created watcher from the same stream.
     * All events sent to the created watcher will attach with the same watch_id.
     * </pre>
     *
     * <code>bool created = 3;</code>
     */
    public function setCreated($var)
    {
        GPBUtil::checkBool($var);
        $this->created = $var;
    }

    /**
     * <pre>
     * canceled is set to true if the response is for a cancel watch request.
     * No further events will be sent to the canceled watcher.
     * </pre>
     *
     * <code>bool canceled = 4;</code>
     */
    public function getCanceled()
    {
        return $this->canceled;
    }

    /**
     * <pre>
     * canceled is set to true if the response is for a cancel watch request.
     * No further events will be sent to the canceled watcher.
     * </pre>
     *
     * <code>bool canceled = 4;</code>
     */
    public function setCanceled($var)
    {
        GPBUtil::checkBool($var);
        $this->canceled = $var;
    }

    /**
     * <pre>
     * compact_revision is set to the minimum index if a watcher tries to watch
     * at a compacted index.
     * This happens when creating a watcher at a compacted revision or the watcher cannot
     * catch up with the progress of the key-value store.
     * The client should treat the watcher as canceled and should not try to create any
     * watcher with the same start_revision again.
     * </pre>
     *
     * <code>int64 compact_revision = 5;</code>
     */
    public function getCompactRevision()
    {
        return $this->compact_revision;
    }

    /**
     * <pre>
     * compact_revision is set to the minimum index if a watcher tries to watch
     * at a compacted index.
     * This happens when creating a watcher at a compacted revision or the watcher cannot
     * catch up with the progress of the key-value store.
     * The client should treat the watcher as canceled and should not try to create any
     * watcher with the same start_revision again.
     * </pre>
     *
     * <code>int64 compact_revision = 5;</code>
     */
    public function setCompactRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->compact_revision = $var;
    }

    /**
     * <code>repeated .mvccpb.Event events = 11;</code>
     */
    public function getEvents()
    {
        return $this->events;
    }

    /**
     * <code>repeated .mvccpb.Event events = 11;</code>
     */
    public function setEvents(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Mvccpb\Event::class);
        $this->events = $arr;
    }

}

