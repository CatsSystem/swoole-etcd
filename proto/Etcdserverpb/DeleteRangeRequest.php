<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>etcdserverpb.DeleteRangeRequest</code>
 */
class DeleteRangeRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * key is the first key to delete in the range.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    private $key = '';
    /**
     * <pre>
     * range_end is the key following the last key to delete for the range [key, range_end).
     * If range_end is not given, the range is defined to contain only the key argument.
     * If range_end is one bit larger than the given key, then the range is all
     * the all keys with the prefix (the given key).
     * If range_end is '&#92;0', the range is all keys greater than or equal to the key argument.
     * </pre>
     *
     * <code>bytes range_end = 2;</code>
     */
    private $range_end = '';
    /**
     * <pre>
     * If prev_kv is set, etcd gets the previous key-value pairs before deleting it.
     * The previous key-value pairs will be returned in the delte response.
     * </pre>
     *
     * <code>bool prev_kv = 3;</code>
     */
    private $prev_kv = false;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * key is the first key to delete in the range.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * <pre>
     * key is the first key to delete in the range.
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->key = $var;
    }

    /**
     * <pre>
     * range_end is the key following the last key to delete for the range [key, range_end).
     * If range_end is not given, the range is defined to contain only the key argument.
     * If range_end is one bit larger than the given key, then the range is all
     * the all keys with the prefix (the given key).
     * If range_end is '&#92;0', the range is all keys greater than or equal to the key argument.
     * </pre>
     *
     * <code>bytes range_end = 2;</code>
     */
    public function getRangeEnd()
    {
        return $this->range_end;
    }

    /**
     * <pre>
     * range_end is the key following the last key to delete for the range [key, range_end).
     * If range_end is not given, the range is defined to contain only the key argument.
     * If range_end is one bit larger than the given key, then the range is all
     * the all keys with the prefix (the given key).
     * If range_end is '&#92;0', the range is all keys greater than or equal to the key argument.
     * </pre>
     *
     * <code>bytes range_end = 2;</code>
     */
    public function setRangeEnd($var)
    {
        GPBUtil::checkString($var, False);
        $this->range_end = $var;
    }

    /**
     * <pre>
     * If prev_kv is set, etcd gets the previous key-value pairs before deleting it.
     * The previous key-value pairs will be returned in the delte response.
     * </pre>
     *
     * <code>bool prev_kv = 3;</code>
     */
    public function getPrevKv()
    {
        return $this->prev_kv;
    }

    /**
     * <pre>
     * If prev_kv is set, etcd gets the previous key-value pairs before deleting it.
     * The previous key-value pairs will be returned in the delte response.
     * </pre>
     *
     * <code>bool prev_kv = 3;</code>
     */
    public function setPrevKv($var)
    {
        GPBUtil::checkBool($var);
        $this->prev_kv = $var;
    }

}

