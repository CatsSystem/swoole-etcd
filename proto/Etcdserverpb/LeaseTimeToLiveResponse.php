<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>etcdserverpb.LeaseTimeToLiveResponse</code>
 */
class LeaseTimeToLiveResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    private $header = null;
    /**
     * <pre>
     * ID is the lease ID from the keep alive request.
     * </pre>
     *
     * <code>int64 ID = 2;</code>
     */
    private $ID = 0;
    /**
     * <pre>
     * TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
     * </pre>
     *
     * <code>int64 TTL = 3;</code>
     */
    private $TTL = 0;
    /**
     * <pre>
     * GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
     * </pre>
     *
     * <code>int64 grantedTTL = 4;</code>
     */
    private $grantedTTL = 0;
    /**
     * <pre>
     * Keys is the list of keys attached to this lease.
     * </pre>
     *
     * <code>repeated bytes keys = 5;</code>
     */
    private $keys;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    public function getHeader()
    {
        return $this->header;
    }

    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    public function setHeader(&$var)
    {
        GPBUtil::checkMessage($var, \Etcdserverpb\ResponseHeader::class);
        $this->header = $var;
    }

    /**
     * <pre>
     * ID is the lease ID from the keep alive request.
     * </pre>
     *
     * <code>int64 ID = 2;</code>
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * <pre>
     * ID is the lease ID from the keep alive request.
     * </pre>
     *
     * <code>int64 ID = 2;</code>
     */
    public function setID($var)
    {
        GPBUtil::checkInt64($var);
        $this->ID = $var;
    }

    /**
     * <pre>
     * TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
     * </pre>
     *
     * <code>int64 TTL = 3;</code>
     */
    public function getTTL()
    {
        return $this->TTL;
    }

    /**
     * <pre>
     * TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
     * </pre>
     *
     * <code>int64 TTL = 3;</code>
     */
    public function setTTL($var)
    {
        GPBUtil::checkInt64($var);
        $this->TTL = $var;
    }

    /**
     * <pre>
     * GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
     * </pre>
     *
     * <code>int64 grantedTTL = 4;</code>
     */
    public function getGrantedTTL()
    {
        return $this->grantedTTL;
    }

    /**
     * <pre>
     * GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
     * </pre>
     *
     * <code>int64 grantedTTL = 4;</code>
     */
    public function setGrantedTTL($var)
    {
        GPBUtil::checkInt64($var);
        $this->grantedTTL = $var;
    }

    /**
     * <pre>
     * Keys is the list of keys attached to this lease.
     * </pre>
     *
     * <code>repeated bytes keys = 5;</code>
     */
    public function getKeys()
    {
        return $this->keys;
    }

    /**
     * <pre>
     * Keys is the list of keys attached to this lease.
     * </pre>
     *
     * <code>repeated bytes keys = 5;</code>
     */
    public function setKeys(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->keys = $arr;
    }

}

