<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * CompactionRequest compacts the key-value store up to a given revision. All superseded keys
 * with a revision less than the compaction revision will be removed.
 * </pre>
 *
 * Protobuf type <code>etcdserverpb.CompactionRequest</code>
 */
class CompactionRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * revision is the key-value store revision for the compaction operation.
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     */
    private $revision = 0;
    /**
     * <pre>
     * physical is set so the RPC will wait until the compaction is physically
     * applied to the local database such that compacted entries are totally
     * removed from the backend database.
     * </pre>
     *
     * <code>bool physical = 2;</code>
     */
    private $physical = false;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * revision is the key-value store revision for the compaction operation.
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     */
    public function getRevision()
    {
        return $this->revision;
    }

    /**
     * <pre>
     * revision is the key-value store revision for the compaction operation.
     * </pre>
     *
     * <code>int64 revision = 1;</code>
     */
    public function setRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->revision = $var;
    }

    /**
     * <pre>
     * physical is set so the RPC will wait until the compaction is physically
     * applied to the local database such that compacted entries are totally
     * removed from the backend database.
     * </pre>
     *
     * <code>bool physical = 2;</code>
     */
    public function getPhysical()
    {
        return $this->physical;
    }

    /**
     * <pre>
     * physical is set so the RPC will wait until the compaction is physically
     * applied to the local database such that compacted entries are totally
     * removed from the backend database.
     * </pre>
     *
     * <code>bool physical = 2;</code>
     */
    public function setPhysical($var)
    {
        GPBUtil::checkBool($var);
        $this->physical = $var;
    }

}

