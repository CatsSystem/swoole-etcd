<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>etcdserverpb.StatusResponse</code>
 */
class StatusResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    private $header = null;
    /**
     * <pre>
     * version is the cluster protocol version used by the responding member.
     * </pre>
     *
     * <code>string version = 2;</code>
     */
    private $version = '';
    /**
     * <pre>
     * dbSize is the size of the backend database, in bytes, of the responding member.
     * </pre>
     *
     * <code>int64 dbSize = 3;</code>
     */
    private $dbSize = 0;
    /**
     * <pre>
     * leader is the member ID which the responding member believes is the current leader.
     * </pre>
     *
     * <code>uint64 leader = 4;</code>
     */
    private $leader = 0;
    /**
     * <pre>
     * raftIndex is the current raft index of the responding member.
     * </pre>
     *
     * <code>uint64 raftIndex = 5;</code>
     */
    private $raftIndex = 0;
    /**
     * <pre>
     * raftTerm is the current raft term of the responding member.
     * </pre>
     *
     * <code>uint64 raftTerm = 6;</code>
     */
    private $raftTerm = 0;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    public function getHeader()
    {
        return $this->header;
    }

    /**
     * <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    public function setHeader(&$var)
    {
        GPBUtil::checkMessage($var, \Etcdserverpb\ResponseHeader::class);
        $this->header = $var;
    }

    /**
     * <pre>
     * version is the cluster protocol version used by the responding member.
     * </pre>
     *
     * <code>string version = 2;</code>
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * <pre>
     * version is the cluster protocol version used by the responding member.
     * </pre>
     *
     * <code>string version = 2;</code>
     */
    public function setVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->version = $var;
    }

    /**
     * <pre>
     * dbSize is the size of the backend database, in bytes, of the responding member.
     * </pre>
     *
     * <code>int64 dbSize = 3;</code>
     */
    public function getDbSize()
    {
        return $this->dbSize;
    }

    /**
     * <pre>
     * dbSize is the size of the backend database, in bytes, of the responding member.
     * </pre>
     *
     * <code>int64 dbSize = 3;</code>
     */
    public function setDbSize($var)
    {
        GPBUtil::checkInt64($var);
        $this->dbSize = $var;
    }

    /**
     * <pre>
     * leader is the member ID which the responding member believes is the current leader.
     * </pre>
     *
     * <code>uint64 leader = 4;</code>
     */
    public function getLeader()
    {
        return $this->leader;
    }

    /**
     * <pre>
     * leader is the member ID which the responding member believes is the current leader.
     * </pre>
     *
     * <code>uint64 leader = 4;</code>
     */
    public function setLeader($var)
    {
        GPBUtil::checkUint64($var);
        $this->leader = $var;
    }

    /**
     * <pre>
     * raftIndex is the current raft index of the responding member.
     * </pre>
     *
     * <code>uint64 raftIndex = 5;</code>
     */
    public function getRaftIndex()
    {
        return $this->raftIndex;
    }

    /**
     * <pre>
     * raftIndex is the current raft index of the responding member.
     * </pre>
     *
     * <code>uint64 raftIndex = 5;</code>
     */
    public function setRaftIndex($var)
    {
        GPBUtil::checkUint64($var);
        $this->raftIndex = $var;
    }

    /**
     * <pre>
     * raftTerm is the current raft term of the responding member.
     * </pre>
     *
     * <code>uint64 raftTerm = 6;</code>
     */
    public function getRaftTerm()
    {
        return $this->raftTerm;
    }

    /**
     * <pre>
     * raftTerm is the current raft term of the responding member.
     * </pre>
     *
     * <code>uint64 raftTerm = 6;</code>
     */
    public function setRaftTerm($var)
    {
        GPBUtil::checkUint64($var);
        $this->raftTerm = $var;
    }

}

